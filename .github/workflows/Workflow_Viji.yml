# 1. Pipelinen ska bestå av individuella workflows, med tydliga namngivningar för workflows, jobs och steps.
# 2. Användning av environment-variabler, GitHub-kontextvariabler och GitHub Secrets (t.ex., API-nycklar och Docker-credentials).
# 3. Logik och beroenden (användning av needs och if-satser) ska användas i pipelinen.
# 4. Pipelinen ska kunna triggas manuellt med workflow_dispatch och erbjuda en parameter för att logga fel:
#   a. Om parametern är satt till true och testerna misslyckas, ska en logg-error artefakt genereras.
#   b. Om parametern är satt till false, skapas ingen loggfil, oavsett testresultat.
# 5. När alla tester är godkända ska pipelinen:
#   a. Skapa en Docker-image av applikationen.
#   b. Publicera Docker-imagen på DockerHub och koppla den till en Azure-app(med användning av Azure-credentials).

name: CI/CD Pipeline for Open Weather Map

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: 'Generate error log if tests fail'
        required: true
        default: 'false'
        type: boolean

env:
  api_key: ${{ secrets.API_KEY }}
  D_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  D_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  # Unit Test
  job_Utest:
    
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10.15

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Run unit tests
      run: |
        pytest weatherdata_unit.py
      continue-on-error: true
      
  # Integration Test
  job_Itest:
    
    needs: job_Utest   # Run only if job_Utest passes
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.10.15

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Run integration tests
      run: |
        pytest weatherdata_integration.py
      continue-on-error: true

    - name: Upload error logs
      uses: actions/upload-artifact@v3
      if: ${{ github.event.inputs.logErrors == 'true' }}
      with:
        name: error-log
        path: error_log.log

  build_docker:
    runs-on: ubuntu-latest
    needs: job_Itest
    steps:
      - uses: actions/checkout@v4
  
      - name: Log in to Docker Hub
        if: SUCCESS()
        run: |
          echo "$D_PASSWORD" | docker login -u "$D_USERNAME" --password-stdin
  
      # Build Docker image
      - name: Build Docker Image
        if: SUCCESS()
        run: |
          docker build -t vijisomu10/test_dockerhub:latest .
  
      - name: Push Docker Image to Docker Hub
        run: |
          docker push vijisomu10/test_dockerhub:latest
