# 1. Pipelinen ska bestå av individuella workflows, med tydliga namngivningar för workflows, jobs och steps.
# 2. Användning av environment-variabler, GitHub-kontextvariabler och GitHub Secrets (t.ex., API-nycklar och Docker-credentials).
# 3. Logik och beroenden (användning av needs och if-satser) ska användas i pipelinen.
# 4. Pipelinen ska kunna triggas manuellt med workflow_dispatch och erbjuda en parameter för att logga fel:
#   a. Om parametern är satt till true och testerna misslyckas, ska en logg-error artefakt genereras.
#   b. Om parametern är satt till false, skapas ingen loggfil, oavsett testresultat.
# 5. När alla tester är godkända ska pipelinen:
#   a. Skapa en Docker-image av applikationen.
#   b. Publicera Docker-imagen på DockerHub och koppla den till en Azure-app(med användning av Azure-credentials).


name: CI Pipeline

on:
  workflow_dispatch:
    inputs:
      log_errors:
        description: "Enable error logging if tests fail"
        required: true
        default: "false"

env:
  IMAGE_NAME: my-app
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

  job_Utest:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run Unit Tests
        run: |
          python -m unittest discover -s tests/unit
        continue-on-error: true

      - name: Upload Unit Test Error Logs
        if: ${{ failure() && github.event.inputs.log_errors == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: unit-test-error-logs
          path: unit_test_logs/

  job_Itest:
    needs: job_Utest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Run Integration Tests
        run: |
          python -m unittest discover -s tests/integration
        continue-on-error: true

      - name: Upload Integration Test Error Logs
        if: ${{ failure() && github.event.inputs.log_errors == 'true' }}
        uses: actions/upload-artifact@v2
        with:
          name: integration-test-error-logs
          path: integration_test_logs/

  build-image:
    needs: job_Itest
    if: ${{ success() }}
    runs-on: ubuntu-latest
    steps:
      - name: Log in to DockerHub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .

      - name: Push Docker Image
        run: |
          docker push ${{ env.IMAGE_NAME }}

